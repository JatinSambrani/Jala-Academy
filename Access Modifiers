#1. Create a class with PRIVATE fields, private method and a main method. Print the fields
#in main method. Call the private method in main method.
#Create a sub class and try to access the private fields and methods from sub class.

class MyClass:
    def __init__(self):
        self.__private_field = "Private Field"

    def __private_method(self):
        print("Private Method")

    def public_method(self):
        print("Public Method")
        self.__private_method()

    def print_private_field(self):
        print(self.__private_field)


class SubClass(MyClass):
    def access_private(self):
        # Attempting to access private field from the subclass
        print("Trying to access private field from subclass:", self.__private_field)

        # Attempting to call private method from the subclass
        print("Trying to call private method from subclass:")
        self.__private_method()


def main():
    obj = MyClass()

    # Accessing private field using a public method
    obj.print_private_field()

    # Calling private method from the main method
    obj.public_method()

    # Trying to access private field and method from the subclass
    sub_obj = SubClass()
    sub_obj.access_private()


if __name__ == "__main__":
    main()

#2. Create a class with PROTECTED fields and methods. Access these fields and methods
#from any other class in the same package.
#Also, Access the PROTECTED fields and methods from child class located in a different
#package
#Access the PROTECTED fields and methods from any class in different package

# Module: my_module.py

class MyClass:
    def __init__(self):
        self._protected_field = "Protected Field"

    def _protected_method(self):
        print("Protected Method")

    def public_method(self):
        print("Public Method")
        self._protected_method()


# Module: another_module.py

from my_module import MyClass


class SubClass(MyClass):
    def access_protected(self):
        # Accessing protected field from the subclass
        print("Protected field from subclass:", self._protected_field)

        # Calling protected method from the subclass
        print("Calling protected method from subclass:")
        self._protected_method()


def main():
    # Accessing protected field and method from another class in the same package
    obj = MyClass()
    print("Protected field from another class in the same package:", obj._protected_field)
    obj._protected_method()

    # Accessing protected field and method from a subclass in a different package
    sub_obj = SubClass()
    sub_obj.access_protected()


if __name__ == "__main__":
    main()

#Create a class with PUBLIC fields and methods.
#Access the public methods and fields from any class in the same package or different
#package
# Module: my_module.py

class MyClass:
    def __init__(self):
        self.public_field = "Public Field"

    def public_method(self):
        print("Public Method")


# Module: another_module.py

from my_module import MyClass


class AnotherClass:
    def access_public(self):
        # Accessing public field and method from another class in a different package
        obj = MyClass()
        print("Public field from another class in a different package:", obj.public_field)
        obj.public_method()


def main():
    # Accessing public field and method from the same package
    obj = MyClass()
    print("Public field from the same package:", obj.public_field)
    obj.public_method()

    # Accessing public field and method from a different package
    another_obj = AnotherClass()
    another_obj.access_public()


if __name__ == "__main__":
    main()

